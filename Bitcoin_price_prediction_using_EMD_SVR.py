# -*- coding: utf-8 -*-
"""Bitcoin Price Prediction Using EMD-SVR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M5cMSAB3q_toE5euN5jCY-nwgVIp9yf2
"""

#Run this cell and upload Blockchain.csv file 
import sklearn
from sklearn.svm import SVR
import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt
from google.colab import files
uploaded = files.upload()

import io
data = io.BytesIO(uploaded['Blockchain.csv'])

f= pd.read_csv(data)
print(f)

!pip install cryptocmd

from cryptocmd import CmcScraper

# initialise scraper
scraper1 = CmcScraper('XRP', '08-08-2015', '12-04-2018')
scraper2 = CmcScraper('ETH', '08-08-2015', '12-04-2018')
scraper3 = CmcScraper('DASH', '08-08-2015', '12-04-2018')
scraper4 = CmcScraper('LTC', '08-08-2015', '12-04-2018')
scraper5 = CmcScraper('XLM', '08-08-2015', '12-04-2018')

# get dataframe for the data
df1 = scraper1.get_dataframe()
df2 = scraper2.get_dataframe()
df3 = scraper3.get_dataframe()
df4 = scraper4.get_dataframe()
df5 = scraper5.get_dataframe()
Y = f['BCHAIN-MKPRU'][0:978]
X =  pd.concat([df1['Close'], df2['Close'], df3['Close'] ,df4['Close'], df5['Close'],f[0:979]], axis=1)
X= X[1:]

from scipy import stats
X = stats.zscore(X)
Y = stats.zscore(Y)
X.shape

t=range(1,979)
plt.plot(t, np.flipud(Y), color='darkorange', label='data')

X_train = X[:930]
X_test = X[930:]
Y_train = Y[:930]
Y_test = Y[930:]

!pip install EMD-signal==0.2.4
from PyEMD import EMD

from sklearn.svm import SVR
emd = EMD()
IMFs = emd(Y_train)
clf1 = SVR()
clf1.fit(X_train, IMFs[0])
clf2 = SVR()
clf2.fit(X_train, IMFs[1])
clf3 = SVR()
clf3.fit(X_train, IMFs[2])
clf4 = SVR()
clf4.fit(X_train, IMFs[3])
clf5 = SVR()
clf5.fit(X_train, IMFs[4])
clf6 = SVR()
clf6.fit(X_train, IMFs[5])
clf7 = SVR()
clf7.fit(X_train, IMFs[6])
clf8 = SVR()
clf8.fit(X_train, IMFs[7])
clf9 = SVR()
clf9.fit(X_train, IMFs[8])
clf = SVR()
clf.fit(np.transpose(IMFs), Y_train)

predict_imf = [clf1.predict(X_test),clf2.predict(X_test), clf3.predict(X_test),clf4.predict(X_test),clf5.predict(X_test),clf6.predict(X_test), 
               clf7.predict(X_test),clf8.predict(X_test), clf9.predict(X_test)]
predict_imf2 = [clf1.predict(X_train),clf2.predict(X_train), clf3.predict(X_train),clf4.predict(X_train),clf5.predict(X_train),clf6.predict(X_train), 
               clf7.predict(X_train),clf8.predict(X_train), clf9.predict(X_train)]
predict = clf.predict(np.transpose(predict_imf2))
predict2 = clf.predict(np.transpose(predict_imf))

from sklearn.metrics import mean_squared_error
#test_loss
mean_squared_error(Y_test, predict2)

#training_loss
mean_squared_error(Y_train, predict)

t = range(1,931)
plt.plot(t, np.flipud(Y_train), color='darkorange', label='data')
plt.plot(t, np.flipud(predict), color='navy', label='RBF model')

#Regression_curve
plt.scatter(Y_train, predict, color='m', label='data', s=15)